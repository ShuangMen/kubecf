# load the config provided when evaluating the template
{{ $config := (datasource "config") }}

# Variables
{{ $availableCfSchedulers := slice "diego" "eirini" }} # Diego / Eirini
{{ $pr_resources := slice "pr" }}
{{ $branches := slice "master" "release-2.2" "release-2.3"}} # Repository branches to track

# Split Concourse jobs in tabs (aka groups)
# We split by "branch" and we also split the "experimental" jobs of each branch.

# Stable Jobs
# TODO: Delete the special case here as soon as we get Eirini CATS green and we stabilize Eirini smoke (e.g. with a more large timeout)
{{ $stable := slice "lint" "build" "deploy-diego" "deploy-eirini" "smoke-tests-diego" "smoke-tests-eirini" "cf-acceptance-tests-diego" "cats-internetless-diego" "sync-integration-tests" "ccdb-rotate-diego" "smoke-tests-post-rotate-diego" "upgrade-test" "cleanup-diego-cluster" "cleanup-eirini-cluster" }}
{{ $experimental := slice "cf-acceptance-tests-eirini" "cats-internetless-eirini" "ccdb-rotate-eirini" "smoke-tests-post-rotate-eirini" }}

groups:
{{ range $_, $branch := (flatten (slice $branches $pr_resources) | uniq) }}
- name: {{ $branch }}
  jobs:
  {{ range $_, $job := $stable }}
  - {{ $job }}-{{ $branch }}
  {{ end }}
  {{ if not ($branch | regexp.Match "^pr") }}
  - publish-{{ $branch }}
  {{ end }}
- name: {{ $branch }}-experimental
  jobs:
  {{ range $_, $job := $experimental }}
  - {{ $job }}-{{ $branch }}
  {{ end }}
{{ end }}

resource_types:
# Use manually built and pushed image until upstream provides a solution:
# https://github.com/cloudfoundry-incubator/kubecf/issues/903
# https://github.com/SUSE/github-pr-resource/commit/3ee0816d801a7038d6125796725aa3718c688b53
- name: pull-request
  type: docker-image
  source:
    repository: splatform/github-pr-resource
    tag: 3ee0816

{{- if $config.github_status }}
- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release
{{- end }}

resources:
- name: kubecf-github-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubecf
    access_token: ((github-access-token))

{{ range $_, $branch := (flatten (slice $branches $pr_resources) | uniq) }}
{{- range $_, $cfScheduler := $availableCfSchedulers }}
- name: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
  type: semver
  source:
    driver: s3
    bucket: {{ $config.s3_bucket }}
    key: gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    initial_version: 0.0.1
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ $config.s3_bucket_region }}
{{ end }} # availableCfSchedulers

- name: semver.gke-cluster-{{ $branch }}-upgrade
  type: semver
  source:
    driver: s3
    bucket: {{ $config.s3_bucket }}
    key: gke-cluster-{{ $branch }}-upgrade
    initial_version: 0.0.1
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ $config.s3_bucket_region }}
{{ end }} # prs and branches (flattened)


{{- range $_, $branch := $branches }}
- name: kubecf-{{ $branch }}
  type: git
  source:
    branch: {{ $branch }}
    uri: https://github.com/{{ $config.kubecf_repository }}
{{- if $config.github_status }}
- name: status-{{ $branch }}.src
  type: github-status
  source:
    repo: {{ $config.kubecf_repository }}
    access_token: ((github-access-token))
{{- end }}
{{ end }}

- name: kubecf-pr
  type: pull-request
  check_every: 10m
  source:
    repository: {{ $config.kubecf_repository }}
    access_token: ((github-access-token))
    required_review_approvals: 1

{{- range $_, $pr := $pr_resources }}

{{- if $config.github_status }}
- name: status-{{$pr}}.src
  type: github-status
  source:
    repo: {{ $config.kubecf_repository }}
    access_token: ((github-access-token))
{{- end }}

{{- end }}

- name: catapult
  type: git
  source:
    uri: https://github.com/SUSE/catapult
  version:
    ref: 0e470c97aac9c656201946f47576772a91ab68e5

- name: s3.kubecf-ci
  type: s3
  source:
    bucket: {{ $config.s3_bucket }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ $config.s3_bucket_region }}
    regexp: kubecf-v(.*).tgz

- name: s3.kubecf-ci-bundle
  type: s3
  source:
    bucket: {{ $config.s3_bucket }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ $config.s3_bucket_region }}
    regexp: kubecf-bundle-v(.*).tgz

- name: s3.kubecf
  type: s3
  source:
    bucket: {{ $config.s3_final_bucket }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ $config.s3_final_bucket_region }}
    regexp: kubecf-v(.*).tgz

- name: s3.kubecf-bundle
  type: s3
  source:
    bucket: {{ $config.s3_final_bucket }}
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: {{ $config.s3_final_bucket_region }}
    regexp: kubecf-bundle-v(.*).tgz

deploy_args: &deploy_args
- -ce
- |

  # Login to gcloud
  printf "%s" '((gke-suse-cap-json))' > $PWD/gke-key.json
  export GKE_CRED_JSON=$PWD/gke-key.json
  gcloud auth activate-service-account --key-file $PWD/gke-key.json

  export GKE_PROJECT="{{ $config.gke_project }}"
  export GKE_CLUSTER_ZONE="{{ $config.gke_zone }}"
  export GKE_CLUSTER_NAME="kubecf-ci-${BRANCH//./-}-${CFSCHEDULER//./-}-$(cat semver.gke-cluster/version | sed 's/\./-/g')"
  export GKE_DNS_ZONE="{{ $config.gke_dns_zone }}"
  export GKE_DOMAIN="{{ $config.gke_domain }}"
  export DOMAIN="${GKE_CLUSTER_NAME}.${GKE_DOMAIN}"

  gcloud --quiet beta container \
    --project "${GKE_PROJECT}" clusters create "${GKE_CLUSTER_NAME}" \
    --enable-network-policy \
    --zone "${GKE_CLUSTER_ZONE}" \
    --no-enable-basic-auth \
    --machine-type "n1-highcpu-16" \
    --image-type "UBUNTU" \
    --disk-type "pd-ssd" \
    --disk-size "100" \
    --metadata disable-legacy-endpoints=true \
    --scopes "https://www.googleapis.com/auth/devstorage.read_only","https://www.googleapis.com/auth/logging.write","https://www.googleapis.com/auth/monitoring","https://www.googleapis.com/auth/servicecontrol","https://www.googleapis.com/auth/service.management.readonly","https://www.googleapis.com/auth/trace.append" \
    --preemptible \
    --num-nodes "1" \
    --enable-stackdriver-kubernetes \
    --enable-ip-alias \
    --network "projects/${GKE_PROJECT}/global/networks/default" \
    --subnetwork "projects/${GKE_PROJECT}/regions/$(echo ${GKE_CLUSTER_ZONE} | sed 's/-.$//')/subnetworks/default" \
    --default-max-pods-per-node "110" \
    --no-enable-master-authorized-networks \
    --addons HorizontalPodAutoscaling,HttpLoadBalancing \
    --no-enable-autorepair \
    --no-enable-autoupgrade \
    --no-enable-autoprovisioning

  # Get a kubeconfig
  gcloud --quiet container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE} --project "${GKE_PROJECT}"

  export SCF_CHART="$(readlink -f s3.kubecf-ci/*.tgz)"
  export BACKEND=gke
  export DOCKER_ORG=cap-staging
  export QUIET_OUTPUT=true
  export DOWNLOAD_CATAPULT_DEPS=false
  export KUBECFG="$(readlink -f ~/.kube/config)"

  # https://unix.stackexchange.com/a/265151
  read -r -d '' CONFIG_OVERRIDE <<'EOF' || true
  sizing:
    diego_cell:
      ephemeral_disk:
        size: 300000
  EOF
  export CONFIG_OVERRIDE

  pushd catapult
  export CLUSTER_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
  # Bring up a k8s cluster and builds+deploy kubecf
  # https://github.com/SUSE/catapult/wiki/Build-and-run-SCF#build-and-run-kubecf
  make kubeconfig kubecf

  # Setup dns
  tcp_router_ip=$(kubectl get svc -n scf tcp-router-public -o json | jq -r .status.loadBalancer.ingress[].ip | head -n 1)
  public_router_ip=$(kubectl get svc -n scf router-public -o json | jq -r .status.loadBalancer.ingress[].ip | head -n 1)

  gcloud --quiet beta dns --project=${GKE_PROJECT} record-sets transaction start \
    --zone=${GKE_DNS_ZONE}
  gcloud --quiet beta dns --project=${GKE_PROJECT} record-sets transaction add \
    --name=\*.${DOMAIN}. --ttl=300 --type=A --zone=${GKE_DNS_ZONE} $public_router_ip
  gcloud --quiet beta dns --project=${GKE_PROJECT} record-sets transaction add \
    --name=tcp.${DOMAIN}. --ttl=300 --type=A --zone=${GKE_DNS_ZONE} $tcp_router_ip
  gcloud --quiet beta dns --project=${GKE_PROJECT} record-sets transaction execute \
    --zone=${GKE_DNS_ZONE}

test_args: &test_args
- -ce
- |

  # Login to gcloud
  printf "%s" '((gke-suse-cap-json))' > $PWD/gke-key.json
  export GKE_CRED_JSON=$PWD/gke-key.json
  gcloud auth activate-service-account --key-file $PWD/gke-key.json

  export GKE_PROJECT="{{ $config.gke_project }}"
  export GKE_CLUSTER_ZONE="{{ $config.gke_zone }}"
  export GKE_CLUSTER_NAME="kubecf-ci-${BRANCH//./-}-${CFSCHEDULER//./-}-$(cat semver.gke-cluster/version | sed 's/\./-/g')"

  # Get a kubeconfig
  gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE} --project "${GKE_PROJECT}"

  export BACKEND=gke
  export KUBECF_NAMESPACE="scf"
  export QUIET_OUTPUT=true
  export DOWNLOAD_CATAPULT_DEPS=false
  export KUBECFG="$(readlink -f ~/.kube/config)"
  pushd catapult
  # Grabs back a deployed cluster and runs test suites on it
  # See: https://github.com/SUSE/catapult/wiki/Running-SCF-tests#kubecf
  make kubeconfig tests-kubecf

rotate_args: &rotate_args
- -ce
- |

  # Login to gcloud
  printf "%s" '((gke-suse-cap-json))' > $PWD/gke-key.json
  export GKE_CRED_JSON=$PWD/gke-key.json
  export GKE_PROJECT="{{ $config.gke_project }}"
  export GKE_CLUSTER_ZONE="{{ $config.gke_zone }}"
  export GKE_CLUSTER_NAME="kubecf-ci-${BRANCH//./-}-${CFSCHEDULER//./-}-$(cat semver.gke-cluster/version | sed 's/\./-/g')"

  gcloud auth activate-service-account --key-file $PWD/gke-key.json
  # Get a kubeconfig
  gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE} --project "${GKE_PROJECT}"

  export BACKEND=gke
  export QUIET_OUTPUT=true
  export DOWNLOAD_CATAPULT_DEPS=false
  export KUBECFG="$(readlink -f ~/.kube/config)"

  pushd catapult
  make kubeconfig
  source build*/.envrc
  popd

  export KUBECF_INSTALL_NAME="susecf-scf"
  export KUBECF_NAMESPACE="scf"

  pushd kubecf
  testing/ccdb_key_rotation/rotate-ccdb-keys-test.sh

jobs:

{{ $path := "" }}
{{- range $_, $branch := flatten (slice $branches $pr_resources)  }}

{{ if ( eq $branch "pr" )}}
{{ $path = ".git/resource/head_sha" }}
{{ else }}
{{ $path = ".git/short_ref" }}
{{ end }}

{{ $sanitized_branch_name := replaceAll "." "_" $branch }}

- name: lint-{{ $branch }}
  plan:
  - get: kubecf-{{ $branch }}
    trigger: true
    version: "every"
{{- if has $stable "lint" }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &lint_{{ $sanitized_branch_name }}_status
        context: lint
        description: "Lint started"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - task: lint
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: kubecf-{{ $branch }}
      run:
        path: "/bin/bash"
        args:
        - -ce
        - |
          cd kubecf-{{ $branch }}
          ./dev/linters/shellcheck.sh
          ./dev/linters/yamllint.sh
          ./dev/linters/helmlint.sh
          bazel test //rules/kubecf:create_sample_values_test

{{- if has $stable "lint" }}
    {{- if $config.github_status }}
    on_success:
      put: status-{{ $branch }}.src
      params:
        << : *lint_{{ $sanitized_branch_name }}_status
        state: success
    on_failure:
      put: status-{{ $branch }}.src
      params:
        << : *lint_{{ $sanitized_branch_name }}_status
        state: failure
    {{ end }}
{{- end }}

- name: build-{{ $branch }}
  public: false # TODO: public or not?
  plan:
  - get: kubecf-{{ $branch }}
    trigger: true
    version: "every"
    passed:
    - lint-{{ $branch }}
{{- if has $stable "build" }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &build_{{ $sanitized_branch_name }}_status
        context: build
        description: "Build started"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - task: build
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: kubecf-{{ $branch }}
      outputs:
      - name: output
      run:
        path: "/bin/bash"
        args:
        - -ce
        - |
          cd kubecf-{{ $branch }}
          ./dev/build.sh ../output
          timestamp=$(date +%s%3N)
          for file in ../output/*.tgz; do
              mv "$file" "${file%.tgz}-${timestamp}.tgz"
          done

{{- if has $stable "build" }}
    {{- if $config.github_status }}
    on_success:
      put: status-{{ $branch }}.src
      params:
        << : *build_{{ $sanitized_branch_name }}_status
        state: success
    on_failure:
      put: status-{{ $branch }}.src
      params:
        << : *build_{{ $sanitized_branch_name }}_status
        state: failure
    {{- end }}
{{- end }}
  - put: s3.kubecf-ci
    params:
      file: output/kubecf-v*.tgz
      acl: public-read
  - put: s3.kubecf-ci-bundle
    params:
      file: output/kubecf-bundle-v*.tgz
      acl: public-read

{{- range $_, $cfScheduler := $availableCfSchedulers }}

# prod-jobs
- name: deploy-{{ $cfScheduler }}-{{ $branch }}
  #max_in_flight: 1 # Re-enable to when we want to set a limit on concurrent deployments
  # Consider adding a serial_group between the two $cfScheduler
  # if jobs starts to starve
  plan:
  - get: kubecf-{{ $branch }}
    trigger: true
    version: "every"
    passed:
    - build-{{ $branch }}
  - get: s3.kubecf-ci
    passed:
    - build-{{ $branch }}
  - get: s3.kubecf-ci-bundle
    passed:
    - build-{{ $branch }}
  - get: catapult
{{- if has $stable (printf "deploy-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "deploy-{{ $cfScheduler }}"
        description: "Deploy {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - put: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    params: {bump: patch}
  - task: deploy
    timeout: 3h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
      semver.gke-cluster: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: kubecf
      - name: catapult
      - name: s3.kubecf-ci
      - name: semver.gke-cluster
      outputs:
      - name: output
      params:
        CATS_NODES: 5
        ENABLE_EIRINI: {{ eq $cfScheduler "eirini" }}
        BRANCH: {{ $branch }}
        CFSCHEDULER: {{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *deploy_args
{{- if has $stable (printf "deploy-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  on_success:
    do:
    - put: status-{{ $branch }}.src
      params:
        << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        state: success
  {{- end }}
{{- end }}
  on_failure:
    in_parallel:
{{- if has $stable (printf "deploy-%s" $cfScheduler) }}
  {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
  {{- end }}
{{- end }}
    - try: &cleanup-cluster
        task: cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
        input_mapping:
          semver.gke-cluster: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: splatform/catapult
          inputs:
          - name: semver.gke-cluster
          run:
            path: "/bin/bash"
            args:
            - -ce
            - |

              # Login to gcloud
              printf "%s" '((gke-suse-cap-json))' > $PWD/gke-key.json
              gcloud auth activate-service-account --key-file $PWD/gke-key.json
              export GKE_PROJECT="{{ $config.gke_project }}"
              export GKE_CLUSTER_ZONE="{{ $config.gke_zone }}"
              export GKE_DNS_ZONE="{{ $config.gke_dns_zone }}"
              export GKE_CLUSTER_NAME="kubecf-ci-${BRANCH//./-}-${CFSCHEDULER//./-}-$(cat semver.gke-cluster/version | sed 's/\./-/g')"
              export GKE_DOMAIN="{{ $config.gke_domain }}"
              export DOMAIN="${GKE_CLUSTER_NAME}.${GKE_DOMAIN}"

              # Get a kubeconfig
              gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_CLUSTER_ZONE} --project "${GKE_PROJECT}"

              pvcs=$(kubectl get pvc -n scf -o json | jq -r .items[].spec.volumeName | paste -sd "|")
              tcp_router_ip=$(kubectl get svc -n scf tcp-router-public -o json | jq -r .status.loadBalancer.ingress[].ip | head -n 1)
              public_router_ip=$(kubectl get svc -n scf router-public -o json | jq -r .status.loadBalancer.ingress[].ip | head -n 1)

              # Delete cluster
              gcloud --quiet container --project "${GKE_PROJECT}" clusters delete "${GKE_CLUSTER_NAME}" \
                    --zone "${GKE_CLUSTER_ZONE}"

              # Delete leftover disks assigned to (now deleted) pvcs.
              # https://cloud.google.com/compute/docs/instances/preemptible#understanding_the_preemption_process
              # https://groups.google.com/d/msg/gce-discussion/RLrwOx8fazo/9ve7lIdsBQAJ
              DISK_IDS=$(gcloud compute disks list \
                    --filter="zone~${GKE_CLUSTER_ZONE}" \
                    --filter="name~${pvcs}" \
                    --filter="-users:*" \
                    --format="value(id)" \
                    --project=${GKE_PROJECT})

              # Delete pvc disks associated to the cluster, now that they are free
              for ID in ${DISK_IDS}; do
                  gcloud compute disks delete ${ID} --zone=${GKE_CLUSTER_ZONE} \
                                                    --project="${GKE_PROJECT}" --quiet;
              done

              gcloud --quiet beta dns --project=${GKE_PROJECT} record-sets \
                transaction start --zone=${GKE_DNS_ZONE}
              gcloud --quiet beta dns --project=${GKE_PROJECT} record-sets \
                transaction remove --name=\*.${DOMAIN}. --ttl=300 --type=A \
                --zone=${GKE_DNS_ZONE} $public_router_ip
              gcloud --quiet beta dns --project=${GKE_PROJECT} record-sets \
                transaction remove --name=tcp.${DOMAIN}. --ttl=300 --type=A \
                --zone=${GKE_DNS_ZONE} $tcp_router_ip
              gcloud --quiet beta dns --project=${GKE_PROJECT} record-sets \
                transaction execute --zone=${GKE_DNS_ZONE}

  on_abort:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "deploy-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
{{- end }}
    {{- end }}
  on_error:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "deploy-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *deploy_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}

{{ $previousTest := "" }}

- name: smoke-tests-{{ $cfScheduler }}-{{ $branch }}
  plan:
  - get: kubecf-{{ $branch }}
    trigger: true
    version: "every"
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: s3.kubecf-ci
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: s3.kubecf-ci-bundle
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
  - get: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    passed:
    - deploy-{{ $cfScheduler }}-{{ $branch }}
    trigger: true
  - get: catapult
{{- if has $stable (printf "smoke-tests-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "smoke-tests-{{ $cfScheduler }}"
        description: "Smoke tests {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - task: test-{{ $cfScheduler }}
    input_mapping:
      kubecf: kubecf-{{ $branch }}
      semver.gke-cluster: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      - name: semver.gke-cluster
      params:
        KUBECF_TEST_SUITE: smokes
        BRANCH: {{ $branch }}
        CFSCHEDULER: {{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *test_args
{{- if has $stable (printf "smoke-tests-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
  {{- end }}
{{- end }}
  on_failure:
    in_parallel:
{{- if has $stable (printf "smoke-tests-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
  on_abort:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "smoke-tests-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
{{- end }}
    {{- end }}
  on_error:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "smoke-tests-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *smoke_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
{{ $previousTest = (printf "smoke-tests-%s-%s" $cfScheduler $branch) }}

- name: cf-acceptance-tests-{{ $cfScheduler }}-{{ $branch }}
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
  - get: catapult
{{- if has $stable (printf "cf-acceptance-tests-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "cf-acceptance-tests-{{ $cfScheduler }}"
        description: "Acceptance tests {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - task: test-{{ $cfScheduler }}
    timeout: 5h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
      semver.gke-cluster: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      - name: semver.gke-cluster
      params:
        KUBECF_TEST_SUITE: cats
        BRANCH: {{ $branch }}
        CFSCHEDULER: {{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *test_args

{{- if has $stable (printf "cf-acceptance-tests-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}
  {{- end }}

  on_failure:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "cf-acceptance-tests-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
  {{- end }}
{{- end }}
  on_abort:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "cf-acceptance-tests-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
{{- end }}
    {{- end }}
  on_error:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "cf-acceptance-tests-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *cats_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
{{ $previousTest = (printf "cf-acceptance-tests-%s-%s" $cfScheduler $branch) }}

- name: cats-internetless-{{ $cfScheduler }}-{{ $branch }}
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
  - get: catapult
{{- if has $stable (printf "cats-internetless-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &cats_internetless_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "cats-internetless-tests-{{ $cfScheduler }}"
        description: "Internetless acceptance tests {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - task: test-{{ $cfScheduler }}
    timeout: 5h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
      semver.gke-cluster: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      - name: semver.gke-cluster
      params:
        DEFAULT_STACK: cflinuxfs3
        KUBECF_TEST_SUITE: cats-internetless
        BRANCH: {{ $branch }}
        CFSCHEDULER: {{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *test_args

{{- if has $stable (printf "cats-internetless-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *cats_internetless_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
{{- end }}
  {{- end }}
  on_failure:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "cats-internetless-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *cats_internetless_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
  on_abort:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "cats-internetless-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *cats_internetless_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
{{- end }}
    {{- end }}
  on_error:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "cats-internetless-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *cats_internetless_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
{{ $previousTest = (printf "cats-internetless-%s-%s" $cfScheduler $branch) }}

# no-prod jobs

{{- if eq $cfScheduler "diego" }}
- name: sync-integration-tests-{{ $branch }}
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
  - get: catapult
{{- if has $stable "sync-integration-tests" }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &sits_{{ $sanitized_branch_name }}_status
        context: "sync-integration-tests"
        description: "Sync Integration tests"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - task: test-{{ $cfScheduler }}
    timeout: 1h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
      semver.gke-cluster: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      - name: semver.gke-cluster
      params:
        KUBECF_TEST_SUITE: sits
        BRANCH: {{ $branch }}
        CFSCHEDULER: {{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *test_args
{{- if has $stable "sync-integration-tests" }}
  {{- if $config.github_status }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *sits_{{ $sanitized_branch_name }}_status
      state: success
  {{- end }}
{{- end }}
  on_failure:
    in_parallel:
{{- if has $stable "sync-integration-tests" }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *sits_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
  on_abort:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable "sync-integration-tests" }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *sits_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}

  on_error:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable "sync-integration-tests" }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *sits_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
{{ $previousTest = (printf "sync-integration-tests-%s" $branch) }}
{{- end }}

- name: ccdb-rotate-{{ $cfScheduler }}-{{ $branch }}
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
  - get: catapult
{{- if has $stable (printf "rotate-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "rotate-{{ $cfScheduler }}"
        description: "Rotating secrets {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - task: rotate-{{ $cfScheduler }}
    timeout: 1h30m
    input_mapping:
      kubecf: kubecf-{{ $branch }}
      semver.gke-cluster: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      - name: semver.gke-cluster
      params:
        BRANCH: {{ $branch }}
        CFSCHEDULER: {{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *rotate_args

{{- if has $stable (printf "rotate-%s" $cfScheduler) }}
  {{- if $config.github_status }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
  {{- end }}
{{- end }}

  on_failure:
    in_parallel:
{{- if has $stable (printf "rotate-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
  on_abort:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "rotate-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
  on_error:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "rotate-%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
{{ $previousTest = (printf "ccdb-rotate-%s-%s" $cfScheduler $branch) }}

- name: smoke-tests-post-rotate-{{ $cfScheduler }}-{{ $branch }}
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: s3.kubecf-ci
    passed:
    - {{ $previousTest | quote }}
  - get: s3.kubecf-ci-bundle
    passed:
    - {{ $previousTest | quote }}
  - get: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
  - get: catapult
{{- if has $stable (printf "smoke-rotated-{%s" $cfScheduler) }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
        context: "smoke-rotated-{{ $cfScheduler }}"
        description: "Smoke tests after rotating secrets {{ $cfScheduler }}"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - task: test-{{ $cfScheduler }}
    input_mapping:
      kubecf: kubecf-{{ $branch }}
      semver.gke-cluster: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      - name: semver.gke-cluster
      params:
        KUBECF_TEST_SUITE: smokes
        BRANCH: {{ $branch }}
        CFSCHEDULER: {{ $cfScheduler }}
      run:
        path: "/bin/bash"
        args: *test_args

{{- if has $stable (printf "smoke-rotated-{%s" $cfScheduler) }}
  {{- if $config.github_status }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
      state: success
  {{- end }}
{{- end }}

  on_failure:
    in_parallel:
{{- if has $stable (printf "smoke-rotated-{%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
  on_abort:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "smoke-rotated-{%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
  on_error:
    in_parallel:
    - try:
        << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: {{ $cfScheduler }}
{{- if has $stable (printf "smoke-rotated-{%s" $cfScheduler) }}
    {{- if $config.github_status }}
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *smoke_rotate_{{ $cfScheduler }}_{{ $sanitized_branch_name }}_status
          state: failure
    {{- end }}
{{- end }}
{{ $previousTest = (printf "smoke-tests-post-rotate-%s-%s" $cfScheduler $branch) }}

# TODO: re-enable and re-adapt once BRAIN tests are fixed.
# - name: brain-tests-{{ $cfScheduler }}
#   plan:
#   - get: commit-to-test
#     passed:
#     - sync-integration-tests-{{ $cfScheduler }}
#     trigger: true
#     version: "every"
#   - get: s3.kubecf-ci
#     passed:
#     - sync-integration-tests-{{ $cfScheduler }}
#   - get: s3.kubecf-ci-bundle
#     passed:
#     - sync-integration-tests-{{ $cfScheduler }}
#   - get: catapult
#   - task: test-{{ $cfScheduler }}
#     timeout: 1h30m
#     config:
#       platform: linux
#       image_resource:
#         type: registry-image
#         source:
#           repository: splatform/catapult
#       inputs:
#       - name: catapult
#       - name: commit-to-test
#       outputs:
#       - name: output
#       params:
#         EKCP_HOST: ((ekcp-host))
#         KUBECF_TEST_SUITE: brain
#       run:
#         path: "/bin/bash"
#         args: *test_args
#     on_success:
#       put: commit-to-test
#       params:
#         description: "Brain tests on {{ $cfScheduler }} succeeded"
#         state: "success"
#         contexts: "brain-tests-{{ $cfScheduler }}"
#         commit_path: "commit-to-test/.git/resource/ref"
#         version_path: "commit-to-test/.git/resource/version"
#     on_failure:
#       do:
#       - put: commit-to-test
#         params:
#           description: "Brain tests on {{ $cfScheduler }} failed"
#           state: "failure"
#           commit_path: "commit-to-test/.git/resource/ref"
#           version_path: "commit-to-test/.git/resource/version"
#           contexts: "brain-tests-{{ $cfScheduler }}"
#       - task: cleanup-cluster
#         config:
#           <<: *cleanup-cluster
#           params:
#             EKCP_HOST: ((ekcp-host))
#     on_abort:
#       task: cleanup-cluster
#       config:
#         <<: *cleanup-cluster
#         params:
#           EKCP_HOST: ((ekcp-host))


- name: cleanup-{{ $cfScheduler }}-cluster-{{ $branch }}
  plan:
  - get: kubecf-{{ $branch }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
    version: "every"
  - get: semver.gke-cluster-{{ $branch }}-{{ $cfScheduler }}
    passed:
    - {{ $previousTest | quote }}
    trigger: true
  ensure:
   do:
    - << : *cleanup-cluster
      params:
        BRANCH: {{ $branch }}
        CFSCHEDULER: {{ $cfScheduler }}

{{ end }} # of range cfScheduler

- name: upgrade-test-{{ $branch }}
  plan:
  - in_parallel:
    - get: kubecf-github-release
    - get: kubecf-{{ $branch }}
      trigger: true
      version: "every"
      passed:
      - build-{{ $branch }}
    - get: s3.kubecf-ci
      passed:
      - build-{{ $branch }}
    - get: s3.kubecf-ci-bundle
      passed:
      - build-{{ $branch }}
    - get: catapult
    - put: semver.gke-cluster-{{ $branch }}-upgrade
      params: {bump: patch}
{{- if has $stable (printf "upgrade-test") }}
  {{- if $config.github_status }}
  - put: status-{{ $branch }}.src
    params: &upgrade-test_{{ $sanitized_branch_name }}_status
        context: "upgrade-test"
        description: "Upgrade from latest GH available release"
        path: kubecf-{{ $branch }}/{{ $path }}
        state: pending
  {{- end }}
{{- end }}
  - task: upgrade
    params:
      BRANCH: {{ $branch }}
      CFSCHEDULER: upgrade # hack to re-use the same cleanup code
      GKE_KEY: '((gke-suse-cap-json))'
      GKE_PROJECT: '{{ $config.gke_project }}'
      GKE_ZONE: '{{ $config.gke_zone }}'
      GKE_DNS_ZONE: '{{ $config.gke_dns_zone }}'
      GKE_DOMAIN: '{{ $config.gke_domain }}'
    input_mapping:
      kubecf: kubecf-{{ $branch }}
      semver.gke-cluster: semver.gke-cluster-{{ $branch }}-upgrade
    timeout: 4h
    file: kubecf-{{ $branch }}/.concourse/tasks/upgrade.yaml
{{- if (has $stable (printf "upgrade-test")) and $config.github_status }}
  on_success:
    put: status-{{ $branch }}.src
    params:
      << : *upgrade-test_{{ $sanitized_branch_name }}_status
      state: success
  on_failure:
    in_parallel:
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *upgrade-test_{{ $sanitized_branch_name }}_status
          state: failure
  on_abort:
    in_parallel:
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *upgrade-test_{{ $sanitized_branch_name }}_status
          state: failure
  on_error:
    in_parallel:
    - try:
        put: status-{{ $branch }}.src
        params:
          << : *upgrade-test_{{ $sanitized_branch_name }}_status
          state: failure
{{- end }}
  ensure:
    do:
      - << : *cleanup-cluster
        params:
          BRANCH: {{ $branch }}
          CFSCHEDULER: upgrade
        input_mapping:
          semver.gke-cluster: semver.gke-cluster-{{ $branch }}-upgrade

{{ if not ($branch | regexp.Match "^pr") }}
- name: publish-{{ $branch }}
  plan:
  - get: s3.kubecf-ci
    passed:
    - smoke-tests-post-rotate-diego-{{ $branch }}
    trigger: {{ $config.trigger_publish }}
  - get: s3.kubecf-ci-bundle
    passed:
    - smoke-tests-post-rotate-diego-{{ $branch }}
    trigger: {{ $config.trigger_publish }}
  - task: rename-artifacts
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: s3.kubecf-ci
      - name: s3.kubecf-ci-bundle
      outputs:
      - name: output
      run:
        path: "/bin/bash"
        args:
        - -ce
        - |
          # Revert to original name without the timestamp part
          for file in s3.kubecf-ci*/*.tgz; do
              new_filename=$(basename $file | sed  's/-[0-9]\+\.tgz/\.tgz/')
              mv "$file" "output/${new_filename}"
          done
  - task: test-if-file-exists
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      params:
        S3_BUCKET: {{ $config.s3_final_bucket }}
        AWS_ACCESS_KEY_ID: ((aws-access-key))
        AWS_SECRET_ACCESS_KEY: ((aws-secret-key))
      inputs:
      - name: output
      run:
        path: "/bin/bash"
        args:
        - -ce
        - |
          # Make sure that tarballs do not exist on s3 yet
          for file in output/*.tgz; do
              aws s3 ls "s3://${S3_BUCKET}/$(basename $file)" && (echo "Tarball already exists on s3. Aborting."; exit 1);
          done
          exit 0
  - put: s3.kubecf
    params:
      file: output/kubecf-v*.tgz
  - put: s3.kubecf-bundle
    params:
      file: output/kubecf-bundle-v*.tgz
{{ end }} # of publish
{{ end }} # of branch
